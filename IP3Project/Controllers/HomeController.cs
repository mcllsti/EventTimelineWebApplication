using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using IP3Project.Models;
using RestSharp;
using Newtonsoft.Json;

namespace IP3Project.Controllers
{
    public class HomeController : BaseController
    {
        /// <summary>
        /// Displays the Index Page with a list of all Timelines
        /// Calls GetAllTimelines function to populate the viewmodel with Timelines
        /// </summary>
        /// <returns>View with a TimLineList viewmodel</returns>
        public IActionResult Index()
        {
            TimelineList model = new TimelineList(); // Initilises a new TimeLineList view model
            model = GetAllTimelines(model); //Calls the GetAllTimelines utility Function

            return View(model); //returns view with model
        }




        public IActionResult Delete(string Id)
        {


            var request = new RestRequest("Timeline/Delete"); //setting up the request params

            DeleteViewModel deleteme = new DeleteViewModel();

            deleteme.TimelineId = Id;
            //request.AddJsonBody(deleteme);
            IRestResponse response = API.PutRequest(request,deleteme); 



            return View(); //returns view with model
        }











        /// <summary>
        /// ERROR HANDLING AUTO GENERATED BY MVC
        /// </summary>
        /// <returns>VIEW WITH ERRORS</returns>
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }

        
        #region Utility

        /// <summary>
        /// Makes a request to the API and returns a populated view model with all timelines 
        /// </summary>
        /// <param name="model">TimelineList viewmodel to be populated with a list of timelines</param>
        /// <returns>Populated TimelineList viewmodel</returns>
        private TimelineList GetAllTimelines(TimelineList model)
        {

            var request = new RestRequest("Timeline/GetTimelines"); //setting up the request params
            IRestResponse response = API.GetRequest(request); //Uses IdeagenAPI wrapperclass to make a request and retreives the response

            var resultsDTO = JsonConvert.DeserializeObject<List<Timeline>>(response.Content); //Deserializes the results from the response

            //Populates the viewmodel with relevent results
            foreach (Timeline x in resultsDTO)
            {
                model.timelines.Add(new TimelineViewModel(x.Title, x.CreationTimeStamp, x.Id));
            }

            return model;
        }

        #endregion


    }
}
