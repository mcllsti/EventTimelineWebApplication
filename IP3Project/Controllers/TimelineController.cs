using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using IP3Project.Classes;
using IP3Project.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using RestSharp;

namespace IP3Project.Controllers
{
    public class TimelineController : BaseController
    {
        // GET: Timeline
        public ActionResult Timelines()
        {
            TimelineList model = new TimelineList();
            model = GetAllTimelines(model);

            return View(model);
        }

        [HttpGet]
        public IActionResult CreateTimeline()
        {
            CreateViewModel model = new CreateViewModel();
            return View(model);

        }

        [HttpPost]
        public IActionResult CreateTimeline(CreateViewModel model)
        {
            string success = Create(model);

            return RedirectToAction("Timelines"); //returns to the Index!

        }

        /// <summary>
        /// Deletes a Timeline from the API and returns to the list of timelines
        /// </summary>
        /// <param name="Id">String Id of timeline to be deleted</param>
        /// <returns>Redirects to Index Action</returns>
        public IActionResult Delete(string Id)
        {

            string IsSuccessful = DeleteTimeline(Id); //Calls delete timeline method which will give a success or failure string

            return RedirectToAction("Index"); //returns to the Index!

        }

        /// <summary>
        /// ERROR HANDLING AUTO GENERATED BY MVC
        /// </summary>
        /// <returns>VIEW WITH ERRORS</returns>
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }


        #region Utility

        /// <summary>
        /// Makes a request to the API and returns a populated view model with all timelines 
        /// </summary>
        /// <param name="model">TimelineList viewmodel to be populated with a list of timelines</param>
        /// <returns>Populated TimelineList viewmodel</returns>
        private TimelineList GetAllTimelines(TimelineList model)
        {

            var request = new RestRequest("Timeline/GetTimelines"); //setting up the request params
            IRestResponse response = API.GetRequest(request); //Uses IdeagenAPI wrapperclass to make a request and retreives the response

            var resultsDTO = JsonConvert.DeserializeObject<List<Timeline>>(response.Content); //Deserializes the results from the response

            //Populates the viewmodel with relevent results
            foreach (Timeline x in resultsDTO)
            {
                model.timelines.Add(new TimelineViewModel(x.Title, x.CreationTimeStamp, x.Id));
            }

            return model;
        }

        /// <summary>
        /// Deletes a timeline by making a request to the api and returns a sucess string
        /// </summary>
        /// <param name="Id">String Id of object to be deleted</param>
        /// <returns>Sucess string</returns>
        private string DeleteTimeline(string Id)
        {

            var request = new RestRequest("Timeline/Delete"); //setting up the request params

            DeleteViewModel DeleteModel = new DeleteViewModel(); //Creates a delete view model to help handle request

            DeleteModel.TimelineId = Id; //Sets the ID of the timeline to be deleted

            var success = API.PutRequest(request, DeleteModel); //Calls API to do request and gets response content from it

            return success.ToString();

        }

        /// <summary>
        /// Creates a timeline.
        /// </summary>
        /// <returns>The timeline.</returns>
        /// <param name="Title">String Title of the timeline.</param>
        /// <param name="Id">String Id to given to the Timleine.</param>
        private String Create(CreateViewModel model)
        {

            var request = new RestRequest("Timeline/Create");

            model.TimelineId = "6";

            var success = API.PutRequest(request, model);

            return success.ToString();


        }

        #endregion



    }
}